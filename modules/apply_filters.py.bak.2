import numpy as np
import logging
from scipy.interpolate import interp1d
from modules.crs_registry import set_crs
from modules.data_types import point_with_normals_dtype  # ‚úÖ Ensure correct dtype
from modules.kdd import create_kd_tree, query_kdtree  # ‚úÖ Corrected import
from modules.distance_filter import apply_distance_filter  # ‚úÖ Ensure correct import

logger = logging.getLogger(__name__)

def apply_filters(chunk, traj_data, config):
    """
    Applies range, motion, and Z filters to a point cloud chunk based on sensor trajectory data.
    Computes pseudo-normals for all points based on the sensor trajectory.
    If KNN or distance filtering is enabled in config, applies those as well.

    Args:
        chunk (np.ndarray): Structured array containing point cloud data.
        traj_data (np.ndarray): Structured NumPy array of sensor trajectory data.
        config (JSONRegistry): The runtime configuration object.

    Returns:
        pass_chunk (np.ndarray): Points passing all filtering conditions (with pseudo-normals).
        fail_chunk (np.ndarray): Points that fail one or more filtering conditions (with pseudo-normals).
    """

    logger.debug("üîπ Filtering in the SENSOR frame...")

    # --- Extract filtering parameters from JSON config (Fixed for JSONRegistry) ---
    short_range = config.get("filtering.range_min", 3.0)
    long_range = config.get("filtering.range_max", 300.0)
    min_motion = config.get("filtering.motion_threshold", 0.001)
    z_pass_offset = config.get("filtering.z_pass_offset", -50)
    knn_enabled = config.get("filtering.knn_enabled", False)
    kd_tree_enabled = config.get("filtering.kd_tree_enabled", False)
    distance_enabled = config.get("filtering.distance_enabled", False)

    # Nearest neighbor filtering parameters
    min_kdd_distance = config.get("filtering.min_kdd_distance", 0.005)
    max_kdd_distance = config.get("filtering.max_kdd_distance", 1.0)
    knn_neighbors = config.get("filtering.knn_neighbors", 10)

    # --- Extract point cloud attributes ---
    point_x = chunk["x"]
    point_y = chunk["y"]
    point_z = chunk["z"]
    point_range = chunk["range"]
    point_time = chunk["time"]

    # --- Extract trajectory attributes ---
    if "traj_x" in traj_data.dtype.names:  # SENSOR TRAJECTORY
        traj_x = traj_data["traj_x"]
        traj_y = traj_data["traj_y"]
        traj_z = traj_data["traj_z"]
    elif "local_x" in traj_data.dtype.names:  # LOCAL TRAJECTORY (GNSS)
        traj_x = traj_data["local_x"]
        traj_y = traj_data["local_y"]
        traj_z = traj_data["local_z"]
    else:
        raise ValueError("‚ùå apply_filters: No valid trajectory fields found!")

    traj_time = traj_data["time"]

    # --- Interpolate trajectory X, Y, Z values at point times ---
    traj_x_interp = interp1d(traj_time, traj_x, kind="linear", fill_value="extrapolate")
    traj_y_interp = interp1d(traj_time, traj_y, kind="linear", fill_value="extrapolate")
    traj_z_interp = interp1d(traj_time, traj_z, kind="linear", fill_value="extrapolate")

    interpolated_traj_x = traj_x_interp(point_time)
    interpolated_traj_y = traj_y_interp(point_time)
    interpolated_traj_z = traj_z_interp(point_time)

    # --- Compute motion distances from trajectory ---
    traj_diff = np.diff(np.column_stack((traj_x, traj_y, traj_z)), axis=0)
    motion_distances = np.linalg.norm(traj_diff, axis=1)
    motion_distances = np.insert(motion_distances, 0, 0)  # Insert zero for first entry

    # --- Interpolate motion distances at point times ---
    motion_interp = interp1d(traj_time, motion_distances, kind="linear", fill_value="extrapolate")
    interpolated_motion = motion_interp(point_time)

    # --- Apply range filtering ---
    valid_range = (short_range < point_range) & (point_range < long_range)

    # --- Apply motion filtering ---
    valid_motion = interpolated_motion >= min_motion

    # --- Apply Z filtering (ensuring points are above a dynamic "pseudo floor") ---
    pseudo_floor = interpolated_traj_z + z_pass_offset
    valid_z = point_z > pseudo_floor

    # --- KNN Filtering ---
    knn_mask = np.ones(len(chunk), dtype=bool)  # Default to all points passing
    if knn_enabled:
        logger.info("üîπ Applying KNN filtering...")
        
        kd_points = np.column_stack((chunk["x"], chunk["y"], chunk["z"]))
        kdtree = create_kd_tree(kd_points)  # ‚úÖ Create KD-tree for nearest neighbor search
        
        # Query k-d tree for nearest neighbor distances
        distances = query_kdtree(kd_points, k=knn_neighbors)


        # Apply min/max KNN distance filtering
        min_distances = np.min(distances) if distances.ndim == 1 else np.min(distances, axis=1)
        knn_mask = (min_distances >= min_kdd_distance) & (min_distances <= max_kdd_distance)
        
        logger.info(f"‚úÖ KNN filtering applied: {np.sum(knn_mask)} points kept.")

    # --- Distance Filtering ---
    distance_mask = np.ones(len(chunk), dtype=bool)  # Default to all points passing
    if distance_enabled:
        logger.info("üîπ Applying distance filtering...")
        distance_mask = apply_distance_filter(chunk, traj_data, config)

    # --- Combine all filtering masks ---
    pass_mask = valid_range & valid_motion & valid_z & knn_mask & distance_mask
    fail_mask = ~pass_mask

    # --- Compute Pseudo-Normals for **All Points** ---
    sensor_vectors = np.column_stack((
        interpolated_traj_x - point_x,
        interpolated_traj_y - point_y,
        interpolated_traj_z - point_z
    ))

    # Normalize vectors to get unit normals
    norms = np.linalg.norm(sensor_vectors, axis=1, keepdims=True)
    pseudo_normals = sensor_vectors / np.maximum(norms, 1e-6)  # Prevent division by zero

    # --- Create Output Structured Arrays with Pseudo-Normals ---
    pass_chunk = np.empty(np.sum(pass_mask), dtype=point_with_normals_dtype)
    fail_chunk = np.empty(np.sum(fail_mask), dtype=point_with_normals_dtype)

    for field in ["time", "x", "y", "z", "intensity", "ring", "returnNum", "range"]:
        pass_chunk[field] = chunk[field][pass_mask]
        fail_chunk[field] = chunk[field][fail_mask]

    pass_chunk["nx"], pass_chunk["ny"], pass_chunk["nz"] = pseudo_normals[pass_mask].T
    fail_chunk["nx"], fail_chunk["ny"], fail_chunk["nz"] = pseudo_normals[fail_mask].T

    set_crs("has_pseudo_normals", True)
    
    logger.info(f"‚úÖ Total Points Kept (PASS): {len(pass_chunk)}")
    logger.info(f"‚úÖ Total Points in FAIL bucket: {len(fail_chunk)}")

    return pass_chunk, fail_chunk
